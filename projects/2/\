// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        Mux16(a=x, b=false, sel=zx, out=x0);
        Not16(in=x0, out=nx0);
        Mux16(a=x0, b=nx0, sel=nx, out=x1);

        Mux16(a=y, b=false, sel=zy, out=y0);
        Not16(in=y0, out=ny0);
        Mux16(a=y0, b=ny0, sel=ny, out=y1);

        And16(a=x1, b=y1, out=andxy);
        Add16(a=x1, b=y1, out=addxy);
        Mux16(a=andxy, b=addxy, sel=f, out=preOut);

        Not16(in=preOut, out=notPreOut);
        Mux16(a=preOut, b=notPreOut, sel=no, out=out);

	Or(a=out[0], b=out[1], out=zr1);
	Or(a=out[2], b=out[3], out=zr2);
	Or(a=out[4], b=out[5], out=zr3);
	Or(a=out[6], b=out[7], out=zr4);
	Or(a=out[8], b=out[9], out=zr5);
	Or(a=out[10], b=out[11], out=zr6);
	Or(a=out[12], b=out[13], out=zr7);
	Or(a=out[14], b=out[15], out=zr8);
	Or(a=zr1, b=zr2, out=zzr1);
	Or(a=zr3, b=zr4, out=zzr2);
	Or(a=zr5, b=zr6, out=zzr3);
	Or(a=zr7, b=zr8, out=zzr4);
	Or(a=zzr1, b=zzr2, out=zzzr1);
	Or(a=zzr3, b=zzr4, out=zzzr2);
	Or(a=zzzr1, b=zzzr2, out=zrresult);
	Mux16(a=true, b=false, sel=zrresult, out=zr);

        And(a=out[15], b=true, out=ngresult);
	Mux16(a=true, b=false, sel=ngresult, out=ng);
 }
